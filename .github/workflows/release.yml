name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  build-go:
    name: Build Go implementation
    runs-on: ubuntu-latest
    steps:
      - name: Prepare metadata
        id: meta
        run: |
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Setup Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Check out project files
        uses: actions/checkout@v1
      - name: Build
        id: build
        run: |
          cd go
          export PATH=$PATH:$(go env GOPATH)/bin
          make PACKAGE=quorum-plugin-hello-world-go VERSION=${{ steps.meta.outputs.version_short }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        if: success()
        with:
          name: go-artifacts
          path: go/build
      - name: Record job status
        id: job_status
        if: always()
        run: |
          LOC="${{ runner.temp }}/build-go"
          mkdir -p $LOC
          echo "${{ job.status }} - ${{ job.name }}" > $LOC/status
          echo "::set-output name=location::$LOC"
      - name: Save job status
        if: always()
        uses: actions/cache@v1
        with:
          path: ${{ steps.job_status.location }}
          key: status-build-go
  build-java:
    name: Build Java implementation
    runs-on: ubuntu-latest
    steps:
      - name: Prepare metadata
        id: meta
        run: |
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Check out project files
        uses: actions/checkout@master
        with:
          submodules: recursive
      - name: Load cached dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build
        id: build
        run: |
          cd java
          mvn clean package -Dpackage=quorum-plugin-hello-world-java -Dversion=${{ steps.meta.outputs.version_short }}
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        if: success()
        with:
          name: java-artifacts
          path: java/target/dist
      - name: Record job status
        id: job_status
        if: always()
        run: |
          LOC="${{ runner.temp }}/build-java"
          mkdir -p $LOC
          echo "${{ job.status }} - ${{ job.name }}" > $LOC/status
          echo "::set-output name=location::$LOC"
      - name: Save job status
        if: always()
        uses: actions/cache@v1
        with:
          path: ${{ steps.job_status.location }}
          key: status-build-java
  prepare-deploy:
    name: Prepare package ${{ matrix.package }}
    needs:
      - build-go
      - build-java
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ["quorum-plugin-hello-world-go", "quorum-plugin-hello-world-java"]
    steps:
      - name: Setup jfrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: Prepare metadata
        id: meta
        run: |
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=package::${{ matrix.package }}"
      - name: Prepare ${{ steps.meta.outputs.package }}@${{ steps.meta.outputs.version }} in Bintray
        run: |
          CHECK_PACKAGE="${{ secrets.BINTRAY_ORGANIZATION }}/${{ secrets.BINTRAY_REPOSITORY }}/${{ steps.meta.outputs.package }}"
          CHECK_VERSION="$CHECK_PACKAGE/${{ steps.meta.outputs.version }}"
          echo "Checking $CHECK_PACKAGE"
          jfrog bt package-show --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} $CHECK_PACKAGE
          echo "Checking $CHECK_VERSION"
          jfrog bt version-show --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} $CHECK_VERSION && x=0 || x=1
          if [ $x -eq 0 ]; then
            echo "$CHECK_VERSION already exists"
          else
            jfrog bt version-create --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} \
                  --vcs-tag ${{ steps.meta.outputs.version }} --released $(date -u +"%Y-%m-%dT%H:%M:%SZ") \
                  $CHECK_VERSION
          fi
  deploy:
    name: Deploy ${{ matrix.artifact }}/${{ matrix.arch }}/${{ matrix.extension }} to Bintray
    needs:
      - prepare-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["linux-amd64", "darwin-amd64"]
        artifact: ["go-artifacts", "java-artifacts"]
    steps:
      - name: Setup jfrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.artifact }}
      - name: Prepare metadata
        id: meta
        run: |
          echo "::set-output name=package::$(cat ${{ matrix.artifact }}/plugin-meta.json | jq -r .name)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Upload to Bintray
        run: |
          jfrog bt upload --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} --publish --override \
                "${{ matrix.artifact }}/${{ matrix.arch }}/${{ steps.meta.outputs.package }}-${{ steps.meta.outputs.version_short }}.*" \
                ${{ secrets.BINTRAY_ORGANIZATION }}/${{ secrets.BINTRAY_REPOSITORY }}/${{ steps.meta.outputs.package }}/${{ steps.meta.outputs.version }} \
                ${{ steps.meta.outputs.package }}/${{ steps.meta.outputs.version }}/${{ matrix.arch }}/
  notify:
    name: Notify Slack
    needs:
      - build-go
      - build-java
      - prepare-deploy
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Collect job status
        uses: actions/cache@v1
        with:
          path: ${{ runner.temp }}/status
          key: notify-slack
          restore-keys: status-
      - name: Send message
        run: |
          ls ${{ runner.temp }}/status/